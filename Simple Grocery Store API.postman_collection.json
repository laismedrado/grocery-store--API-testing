{
	"info": {
		"_postman_id": "e6244d1e-6c06-46d7-b8be-347649e98f8c",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32335146",
		"_collection_link": "https://winter-meteor-360700.postman.co/workspace/New-Team-Workspace~ec06e7ab-a9ac-4db8-9b98-61b58510ddf2/collection/32335146-e6244d1e-6c06-46d7-b8be-347649e98f8c?action=share&source=collection_link&creator=32335146"
	},
	"item": [
		{
			"name": "pre teste",
			"item": [
				{
					"name": "data new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () =>  {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"clientName\", pm.response.json().results[0].name.first);",
									"pm.globals.set(\"clientEmail\", pm.response.json().results[0].email);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://randomuser.me/api/",
							"protocol": "https",
							"host": [
								"randomuser",
								"me"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", ()  => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.globals.set(\"acessToken\", response.acessToken);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientName\": \"{{clientName}}\",\n    \"clientEmail\": \"{{clientEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api-clients",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Happy path",
			"item": [
				{
					"name": "API status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status should be UP\", () =>  {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"UP\");",
									"});",
									"",
									"const name = 'James'",
									"pm.collectionVariables.set('firstName',name);",
									"pm.globals.set('firstName', 'Jamie');",
									"console.log(pm.globals.get('firstName'));",
									"pm.globals.unset('fistName', 'Jamnie');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/status",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()  => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\" At least one avaliable product exist\", () => {",
									"const response = pm.response.json();",
									"pm.expect(response).to.be.an('array')",
									"pm.expect(response.length).to.be.above(0)",
									"const product = response [0]",
									"pm.expect(product).to.be.an('object')",
									"pm.expect(product).to.haveOwnProperty('id')",
									"pm.expect(product.id).to.be.a('number')",
									"pm.expect(product).to.haveOwnProperty('inStock')",
									"pm.expect(product.inStock).to.be.true",
									"",
									"console.log (response[0].id);",
									"pm.environment.set('productId',product.id)",
									"})",
									"// 2 formas de adentrar no objeto json ",
									"",
									"//1-",
									"// const response1 = pm.response.json()[0].id",
									"// console.log(response1)",
									"",
									"// //2- ",
									"// const response = pm.response.json();",
									"// console.log (response[0].id);",
									"// pm.collectionVariables.set('productId',response[0].id)",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?available=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "eggs",
									"disabled": true
								},
								{
									"key": "results",
									"value": "0",
									"disabled": true
								},
								{
									"key": "available",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()  => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json()",
									"",
									"pm.test(\" Response is an objetc\", () =>{",
									"    pm.expect(response).to.be.an(\"object\");",
									"})",
									"",
									"pm.test('Correct product was retrieved', () =>{",
									"    const requestProductId = pm.variables.get('productId')",
									"    console.log(requestProductId)",
									"    pm.expect(response.id).to.eql(requestProductId)",
									"})",
									"",
									"pm.test(\"Product name\", ()=>{",
									"    pm.expect(response.name).to.be.a('string');",
									"})",
									"",
									"pm.test(\"Product is in stock\", ()=>{",
									"    pm.expect(response.inStock).to.eql(true)",
									"})",
									"",
									"pm.test(\"Product is in stock\", ()=>{",
									"    pm.expect(response.inStock).to.be.true",
									"})",
									"",
									"pm.test(\"Product price is a number and be abobe 0\", ()=>{",
									"    pm.expect(response.price).to.be.a('number')",
									"    pm.expect(response.price).to.be.above(0)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products/:productId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								":productId"
							],
							"query": [
								{
									"key": "product-label",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", ()  => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test (\"Response has valid cartId\", () => {",
									"const response = pm.response.json()",
									"pm.expect(response).to.be.an('object');",
									"pm.expect(response).to.haveOwnProperty('cartId')",
									"pm.expect(response.cartId).to.be.a('string')",
									"pm.environment.set('cartId',response.cartId)",
									"})",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()  => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carts/:cartId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add items to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", ()  => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Item was created', () =>{",
									"const response = pm.response.json()",
									"pm.expect(response).to.be.an('object')",
									"pm.expect(response.created).to.be.true",
									"pm.expect(response.itemId).to.be.a('number')",
									"pm.environment.set('lastAddedItemId', response.itemId)",
									"})",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n    {\n        \"productId\": {{productId}}\n    }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()  => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()  => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(maxValue) {",
									"    return Math.floor(Math.random() * maxValue)",
									"}",
									"",
									"console.log(getRandomNumber(14))",
									"pm.environment.set('randomQuantity', getRandomNumber(14))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7dc291140923",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"quantity\":{{randomQuantity}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace product in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()  => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7dc291140923",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": 4643,\n    \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()  => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7dc291140923",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// {\n//  \"productId\": 4643,\n//  \"quantity\": 3\n// }\n\n{\n \"productId\": \"{{productId}}\",\n \"quantity\": \"{{randomQuantity}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add items to cart Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", ()  => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Item was created', () =>{",
									"const response = pm.response.json()",
									"pm.expect(response).to.be.an('object')",
									"pm.expect(response.created).to.be.true",
									"pm.expect(response.itemId).to.be.a('number')",
									"pm.environment.set('lastAddedItemId', response.itemId)",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n    {\n        \"productId\": {{productId}}\n    }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", ()  => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Order was created', () =>{",
									"const response = pm.response.json()",
									"pm.expect(response).to.be.an('object')",
									"pm.expect(response.created).to.be.true",
									"pm.expect(response.orderId).to.be.a('string')",
									"pm.environment.set('orderId', response.orderId)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7dc291140923",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{cartId}}\",\n    \"customerName\": \"{{$randomFullName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", ()  => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Error message contains the deleted order id', () =>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.haveOwnProperty('error')",
									"    pm.expect(response.error).to.contain(pm.variables.get('orderId'));",
									"    pm.expect(response.error).to.include(pm.variables.get('orderId'));    ",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7dc291140923",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()  => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Created order is in the list', () =>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.find((order) => order.id === pm.environment.get('orderId'))).to.be.an('object');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{acessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()  => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7dc291140923",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"comment\": \"testando fazer comentário\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()  => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7dc291140923",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing authentication",
			"item": [
				{
					"name": "Create an order - missing header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message\", ()=>{",
									" const response = pm.response.json()",
									" pm.expect(response.error).to.eql(\"Missing Authorization header.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7dc291140923",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"QhlQ_4si0NbHCUDVf4Ac8\",\n    \"customerName\": \"{{$randomFullName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an order - invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message\", ()=>{",
									" const response = pm.response.json()",
									" pm.expect(response.error).to.eql(\"Invalid bearer token.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "9ecafa30b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7pc291140923",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b9805937f21f84e10bfc9e5360517f650dda2eb7c89d7dc291140923",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"QhlQ_4si0NbHCUDVf4Ac8\",\n    \"customerName\": \"{{$randomFullName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders - missing header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message\", ()=>{",
									" const response = pm.response.json()",
									" pm.expect(response.error).to.eql(\"Missing Authorization header.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders - invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message\", ()=>{",
									" const response = pm.response.json()",
									" pm.expect(response.error).to.eql(\"Invalid bearer token.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "9ecafa39b6805937f21f84e19bfc9e5360514f650dda2eb7c89d7dc291140923",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "9ecafa39b6805937f21f84e19bfc9e5360514f650dda2eb7c89d7dc291140923",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 401\", ()  => {",
							"    pm.response.to.have.status(401);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Invalid inputs",
			"item": [
				{
					"name": "Get all products - result > maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message\", ()=>{",
									" const response = pm.response.json()",
									" pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'results'. Cannot be greater than 20.\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?results=21",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "results",
									"value": "0",
									"disabled": true
								},
								{
									"key": "results",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - result < minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// segue abaixo duas formas de verificar a msg de erro:",
									"",
									"// pm.test(\"Error message\", ()=>{",
									"//  const response = pm.response.json()",
									"//  pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'results'. Must be greater than 0.\")",
									"// })",
									"",
									"pm.test(\"Error message\", ()=>{",
									" const response = pm.response.json()",
									" const expectedError = \"Invalid value for query parameter 'results'. Must be greater than 0.\"",
									" pm.expect(response.error).to.eql(expectedError)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?results=-1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "results",
									"value": "0",
									"disabled": true
								},
								{
									"key": "results",
									"value": "-1"
								}
							]
						},
						"description": "This is test verified"
					},
					"response": []
				},
				{
					"name": "Get all products - result = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// segue abaixo duas formas de verificar a msg de erro:",
									"",
									"// pm.test(\"Error message\", ()=>{",
									"//  const response = pm.response.json()",
									"//  pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'results'. Must be greater than 0.\")",
									"// })",
									"",
									"",
									"pm.test(\"Error message\", ()=>{",
									" const response = pm.response.json()",
									" const expectedError = \"Invalid value for query parameter 'results'. Must be greater than 0.\"",
									" pm.expect(response.error).to.eql(expectedError)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?results=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "results",
									"value": "0"
								}
							]
						},
						"description": "This is test verified"
					},
					"response": []
				},
				{
					"name": "Get all products - invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Error message\", ()=>{",
									"//  const response = pm.response.json()",
									"//  pm.expect(response.error).to.eql(\"Invalid value for query parameter 'category'. Must be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee\")",
									"// })",
									"console.log(pm.environment.name)",
									"if (pm.environment.name === 'Testing') {",
									"pm.test(\"Error message\", ()=>{",
									" const response = pm.response.json()",
									" pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'category'.\")",
									"})",
									"}",
									"",
									"postman.setNextRequest(\"null\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?category=invalid-category",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid-category"
								},
								{
									"key": "results",
									"value": "0",
									"disabled": true
								},
								{
									"key": "results",
									"value": "5",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 400\", ()  => {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		}
	]
}